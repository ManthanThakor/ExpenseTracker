@model ExpenseTrackerMvc.ViewModels.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Dashboard</h1>
        <div class="btn-group">
            <a asp-action="Index" asp-route-timeFrame="week" class="btn @(Model.TimeFrame == "week" ? "btn-primary" : "btn-outline-primary")">Week</a>
            <a asp-action="Index" asp-route-timeFrame="month" class="btn @(Model.TimeFrame == "month" ? "btn-primary" : "btn-outline-primary")">Month</a>
            <a asp-action="Index" asp-route-timeFrame="quarter" class="btn @(Model.TimeFrame == "quarter" ? "btn-primary" : "btn-outline-primary")">Quarter</a>
            <a asp-action="Index" asp-route-timeFrame="year" class="btn @(Model.TimeFrame == "year" ? "btn-primary" : "btn-outline-primary")">Year</a>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Summary Cards -->
        <div class="col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-muted">Total Expenses</h5>
                    <h2 class="mb-0 text-primary">@Model.TotalAmount.ToString("C")</h2>
                    <p class="text-muted">From @Model.StartDate.ToString("MMM dd") to @Model.EndDate.ToString("MMM dd, yyyy")</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-muted">Transactions</h5>
                    <h2 class="mb-0 text-success">@Model.TotalTransactions</h2>
                    <p class="text-muted">Average: @Model.AverageAmount.ToString("C") per transaction</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-muted">Daily Average</h5>
                    <h2 class="mb-0 text-info">@(((Model.TotalAmount) / Math.Max(1, (Model.EndDate - Model.StartDate).Days)).ToString("C"))</h2>
                    <p class="text-muted">Over @Math.Max(1, (Model.EndDate - Model.StartDate).Days) days</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Charts -->
        <div class="col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Category Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="categoryChart" height="250"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Monthly Trends</h5>
                </div>
                <div class="card-body">
                    <canvas id="trendChart" height="250"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Recent Transactions -->
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Recent Transactions</h5>
                    <a asp-controller="Expense" asp-action="Index" class="btn btn-sm btn-primary">View All</a>
                </div>
                <div class="card-body p-0">
                    @if (!Model.RecentExpenses.Any())
                    {
                        <div class="text-center py-5">
                            <p class="lead mb-0">No recent transactions</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date</th>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th class="text-end">Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var expense in Model.RecentExpenses)
                                    {
                                        <tr>
                                            <td>@expense.Date.ToString("MMM dd")</td>
                                            <td>@expense.Title</td>
                                            <td>
                                                @if (expense.Category != null)
                                                {
                                                    <span class="badge" style="background-color: @expense.Category.Color">
                                                        @if (!string.IsNullOrEmpty(expense.Category.Icon))
                                                        {
                                                            <i class="@expense.Category.Icon me-1"></i>
                                                        }
                                                        @expense.Category.Name
                                                    </span>
                                                }
                                            </td>
                                            <td class="text-end">@expense.Amount.ToString("C")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Category Chart
            const categoryData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CategoryDistribution));
            const categoryLabels = categoryData.map(item => item.categoryName);
            const categoryAmounts = categoryData.map(item => item.totalAmount);
            const categoryColors = categoryData.map(item => item.color);

            const categoryChart = new Chart(document.getElementById('categoryChart'), {
                type: 'doughnut',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        data: categoryAmounts,
                        backgroundColor: categoryColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        }
                    }
                }
            });

            // Trend Chart
            const trendData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlyTrends));
            const trendLabels = trendData.map(item => {
                const date = new Date(item.date);
                return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
            });
            const trendAmounts = trendData.map(item => item.totalAmount);

            const trendChart = new Chart(document.getElementById('trendChart'), {
                type: 'bar',
                data: {
                    labels: trendLabels,
                    datasets: [{
                        label: 'Total Expenses',
                        data: trendAmounts,
                        backgroundColor: 'rgba(54, 162, 235, 0.7)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
}