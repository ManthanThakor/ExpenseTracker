@model ExpenseTrackerMvc.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
<link href="~/css/deshboardsec/deshboard.css" rel="stylesheet" />


<div class="container-fluid py-4 dashboard-section" style="padding-top:120px!important; padding-bottom:100px!important; padding-left:100px!important; padding-right:100px !important;">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-5 fw-bold">
                <i class="fas fa-chart-pie me-2"></i>
                Financial Dashboard
            </h1>
            <p class="text-muted">Overview of your income and expenses</p>
        </div>
    </div>

    <!-- Date Range Filter -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="glass-card p-3">
                <form method="get" asp-action="Dashboard" class="row g-3 align-items-end">
                    <div class="col-md-3">
                        <label class="form-label">From Date</label>
                        <input type="date" name="startDate" class="form-control"
                               value="@Model.StartDate.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">To Date</label>
                        <input type="date" name="endDate" class="form-control"
                               value="@Model.EndDate.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-filter me-2"></i> Apply
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-4 mb-3 mb-md-0">
            <div class="summary-card bg-success text-white h-100 pulse">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title mb-1">Total Income</h5>
                            <h2 class="card-text mb-0">@Model.TotalIncome.ToString("C")</h2>
                        </div>
                        <i class="fas fa-arrow-down fa-2x opacity-50" style="transform: rotate(45deg);"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3 mb-md-0">
            <div class="summary-card bg-danger text-white h-100 pulse" style="animation-delay: 0.2s">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title mb-1">Total Expense</h5>
                            <h2 class="card-text mb-0">@Model.TotalExpense.ToString("C")</h2>
                        </div>
                        <i class="fas fa-arrow-up fa-2x opacity-50" style="transform: rotate(45deg);"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="summary-card @(Model.Balance >= 0 ? "bg-primary" : "bg-warning") text-white h-100 pulse" style="animation-delay: 0.4s">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title mb-1">Balance</h5>
                            <h2 class="card-text mb-0">@Model.Balance.ToString("C")</h2>
                        </div>
                        <i class="fas fa-balance-scale fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <!-- Income vs Expense Chart -->
        <div class="col-lg-6 mb-4 mb-lg-0">
            <div class="glass-card h-100">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-chart-bar me-2"></i> Income vs Expense</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="incomeExpenseChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Category Breakdown Chart -->
        <div class="col-lg-6">
            <div class="glass-card h-100">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-chart-pie me-2"></i> Category Breakdown</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="categoryChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Breakdown Details -->
    <div class="row">
        <!-- Income Categories -->
        <div class="col-lg-6 mb-4 mb-lg-0">
            <div class="glass-card h-100">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-arrow-down text-success me-2"></i> Income Categories</h5>
                </div>
                <div class="card-body">
                    @foreach (var category in Model.CategorySummaries.Where(c => c.Type == "Income"))
                    {
                        <div class="category-item">
                            <div class="category-color" style="background-color: @category.Color;"></div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between">
                                    <span>@category.Name</span>
                                    <span>@category.Amount.ToString("C") (@category.Percentage.ToString("0.0")%)</span>
                                </div>
                                <div class="progress mt-2" style="height: 6px;">
                                    <div class="progress-bar bg-success" role="progressbar"
                                         style="width: @category.Percentage%;"
                                         aria-valuenow="@category.Percentage"
                                         aria-valuemin="0"
                                         aria-valuemax="100"></div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!Model.CategorySummaries.Any(c => c.Type == "Income"))
                    {
                        <div class="text-center py-3 text-muted">
                            <i class="fas fa-info-circle me-2"></i> No income categories found
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Expense Categories -->
        <div class="col-lg-6">
            <div class="glass-card h-100">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-arrow-up text-danger me-2"></i> Expense Categories</h5>
                </div>
                <div class="card-body">
                    @foreach (var category in Model.CategorySummaries.Where(c => c.Type == "Expense"))
                    {
                        <div class="category-item">
                            <div class="category-color" style="background-color: @category.Color;"></div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between">
                                    <span>@category.Name</span>
                                    <span>@category.Amount.ToString("C") (@category.Percentage.ToString("0.0")%)</span>
                                </div>
                                <div class="progress mt-2" style="height: 6px;">
                                    <div class="progress-bar bg-danger" role="progressbar"
                                         style="width: @category.Percentage%;"
                                         aria-valuenow="@category.Percentage"
                                         aria-valuemin="0"
                                         aria-valuemax="100"></div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!Model.CategorySummaries.Any(c => c.Type == "Expense"))
                    {
                        <div class="text-center py-3 text-muted">
                            <i class="fas fa-info-circle me-2"></i> No expense categories found
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Income vs Expense Line Chart
            const incomeExpenseCtx = document.getElementById('incomeExpenseChart').getContext('2d');
            const dates = @Html.Raw(Json.Serialize(Model.DailyTransactions.Select(d => d.Date.ToString("MMM dd")).ToArray()));
            const incomeData = @Html.Raw(Json.Serialize(Model.DailyTransactions.Select(d => d.Income).ToArray()));
            const expenseData = @Html.Raw(Json.Serialize(Model.DailyTransactions.Select(d => d.Expense).ToArray()));

            new Chart(incomeExpenseCtx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: 'Income',
                            data: incomeData,
                            borderColor: '#00b09b',
                            backgroundColor: 'rgba(0, 176, 155, 0.1)',
                            tension: 0.3,
                            fill: true
                        },
                        {
                            label: 'Expense',
                            data: expenseData,
                            borderColor: '#ff416c',
                            backgroundColor: 'rgba(255, 65, 108, 0.1)',
                            tension: 0.3,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#f8f9fa',
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + context.parsed.y.toLocaleString('en-US', {
                                        style: 'currency',
                                        currency: 'USD'
                                    });
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#f8f9fa'
                            }
                        },
                        y: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#f8f9fa',
                                callback: function(value) {
                                    return '$' + value;
                                }
                            }
                        }
                    }
                }
            });

            // Category Breakdown Doughnut Chart
            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            const incomeCategories = @Html.Raw(Json.Serialize(Model.CategorySummaries.Where(c => c.Type == "Income").Select(c => c.Name).ToArray()));
            const incomeAmounts = @Html.Raw(Json.Serialize(Model.CategorySummaries.Where(c => c.Type == "Income").Select(c => c.Amount).ToArray()));
            const incomeColors = @Html.Raw(Json.Serialize(Model.CategorySummaries.Where(c => c.Type == "Income").Select(c => c.Color).ToArray()));

            const expenseCategories = @Html.Raw(Json.Serialize(Model.CategorySummaries.Where(c => c.Type == "Expense").Select(c => c.Name).ToArray()));
            const expenseAmounts = @Html.Raw(Json.Serialize(Model.CategorySummaries.Where(c => c.Type == "Expense").Select(c => c.Amount).ToArray()));
            const expenseColors = @Html.Raw(Json.Serialize(Model.CategorySummaries.Where(c => c.Type == "Expense").Select(c => c.Color).ToArray()));

            new Chart(categoryCtx, {
                type: 'doughnut',
                data: {
                    labels: [...incomeCategories, ...expenseCategories],
                    datasets: [{
                        data: [...incomeAmounts, ...expenseAmounts],
                        backgroundColor: [...incomeColors, ...expenseColors],
                        borderColor: 'rgba(0, 0, 0, 0.1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: '#f8f9fa',
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value.toLocaleString('en-US', {
                                        style: 'currency',
                                        currency: 'USD'
                                    })} (${percentage}%)`;
                                }
                            }
                        },
                        datalabels: {
                            display: false
                        }
                    },
                    cutout: '65%'
                },
                plugins: [ChartDataLabels]
            });

            // Add hover effects to category items
            document.querySelectorAll('.category-item').forEach(item => {
                item.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateX(5px)';
                });

                item.addEventListener('mouseleave', function() {
                    this.style.transform = '';
                });
            });
        });
    </script>
}